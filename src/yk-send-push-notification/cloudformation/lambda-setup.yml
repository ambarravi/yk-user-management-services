AWSTemplateFormatVersion: "2010-09-09"

Resources:
  # Lambda: Send Push Notification and Email for Event Updates
  SendPushNotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: yk-send-push-notification
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 900
      Environment:
        Variables:
          S3_BUCKET: "tiktie-notifications"
          S3_FCM_KEY: "tiktie-firebase-adminsdk-fbsvc-345e7ed13f.json"
          SENDER_EMAIL: !Ref SenderEmail
          EVENT_TABLE: "EventDetails"
          BOOKING_TABLE: "BookingDetails"
          USERS_TABLE: "UsersTable"
          NOTIFICATION_LOGS_TABLE: "NotificationLogs"
      MemorySize: 256
      ReservedConcurrentExecutions: 5
      Code:
        ZipFile: |
          // Placeholder: Upload actual code via ZIP file
          export const handler = async () => {
            return { statusCode: 200, body: "Placeholder" };
          };
      Role: !GetAtt SendPushNotificationLambdaExecutionRole.Arn
      TracingConfig:
        Mode: Active

  # SES Template: CANCELLED
  EventCancelledTemplate:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: EventUpdateTemplate_CANCELLED
        SubjectPart: "{{subject}}"
        TextPart: "{{body}}"
        HtmlPart: |
          <!DOCTYPE html>
          <html>
          <head>
            <title>{{subject}}</title>
            <style>
              .container { max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif; }
              .logo { max-width: 150px; height: auto; display: block; margin: 0 auto 20px; }
              .content { line-height: 1.6; }
            </style>
          </head>
          <body>
            <div class="container">
              <img src="{{LogoUrl}}" alt="Event Logo" class="logo">
              <h2>{{subject}}</h2>
              <p class="content">{{body}}</p>
              <p class="content">Best regards,<br>Event Team</p>
            </div>
          </body>
          </html>

  # SES Template: RESCHEDULED
  EventRescheduledTemplate:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: EventUpdateTemplate_RESCHEDULED
        SubjectPart: "{{subject}}"
        TextPart: "{{body}}"
        HtmlPart: |
          <!DOCTYPE html>
          <html>
          <head>
            <title>{{subject}}</title>
            <style>
              .container { max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif; }
              .logo { max-width: 150px; height: auto; display: block; margin: 0 auto 20px; }
              .content { line-height: 1.6; }
            </style>
          </head>
          <body>
            <div class="container">
              <img src="{{LogoUrl}}" alt="Event Logo" class="logo">
              <h2>{{subject}}</h2>
              <p class="content">{{body}}</p>
              <p class="content">Best regards,<br>Event Team</p>
            </div>
          </body>
          </html>

  # SES Template: VENUE_CHANGED
  EventVenueChangedTemplate:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: EventUpdateTemplate_VENUE_CHANGED
        SubjectPart: "{{subject}}"
        TextPart: "{{body}}"
        HtmlPart: |
          <!DOCTYPE html>
          <html>
          <head>
            <title>{{subject}}</title>
            <style>
              .container { max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif; }
              .logo { max-width: 150px; height: auto; display: block; margin: 0 auto 20px; }
              .content { line-height: 1.6; }
            </style>
          </head>
          <body>
            <div class="container">
              <img src="{{LogoUrl}}" alt="Event Logo" class="logo">
              <h2>{{subject}}</h2>
              <p class="content">{{body}}</p>
              <p class="content">Best regards,<br>Event Team</p>
            </div>
          </body>
          </html>

  # SES Template: EVENT_UPDATED
  EventUpdatedTemplate:
    Type: AWS::SES::Template
    Properties:
      Template:
        TemplateName: EventUpdateTemplate_EVENT_UPDATED
        SubjectPart: "{{subject}}"
        TextPart: "{{body}}"
        HtmlPart: |
          <!DOCTYPE html>
          <html>
          <head>
            <title>{{subject}}</title>
            <style>
              .container { max-width: 600px; margin: 0 auto; padding: 20px; font-family: Arial, sans-serif; }
              .logo { max-width: 150px; height: auto; display: block; margin: 0 auto 20px; }
              .content { line-height: 1.6; }
            </style>
          </head>
          <body>
            <div class="container">
              <img src="{{LogoUrl}}" alt="Event Logo" class="logo">
              <h2>{{subject}}</h2>
              <p class="content">{{body}}</p>
              <p class="content">Best regards,<br>Event Team</p>
            </div>
          </body>
          </html>

  # IAM Role for SendPushNotificationLambda
  SendPushNotificationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SendPushNotificationLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:PutItem
                  - dynamodb:BatchGetItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/BookingDetails
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/BookingDetails/index/*
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/EventDetails
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/UsersTable
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NotificationLogs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/yk-send-push-notification:*
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::tiktie-notifications/*
                  - !Sub arn:aws:s3:::tiktie-notifications
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt EventCancellationQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt EventCancellationDLQ.Arn
              - Effect: Allow
                Action:
                  - ses:SendEmail
                  - ses:SendBulkTemplatedEmail
                Resource: "*"
                Condition:
                  StringEquals:
                    ses:FromAddress: !Ref SenderEmail

  # SQS Queue: Event Cancellation Queue
  EventCancellationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EventCancellationQueue
      VisibilityTimeout: 1800
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EventCancellationDLQ.Arn
        maxReceiveCount: 3

  # SQS Dead Letter Queue
  EventCancellationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EventCancellationDLQ

  # Lambda Event Source Mapping for SQS
  EventCancellationQueueEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt EventCancellationQueue.Arn
      FunctionName: !Ref SendPushNotificationLambda
      BatchSize: 10
      Enabled: true

  # Lambda Permission for SQS
  SqsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendPushNotificationLambda
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt EventCancellationQueue.Arn

Parameters:
  SenderEmail:
    Type: String
    Description: The verified SES sender email address
    Default: "support@tikties.com"
  LogoUrl:
    Type: String
    Description: Public URL of the logo image for email templates
    Default: "https://tiktie-notifications.s3.amazonaws.com/images/logo.png"

Outputs:
  SendPushNotificationLambdaArn:
    Description: ARN of the Send Push Notification Lambda function
    Value: !GetAtt SendPushNotificationLambda.Arn
  EventCancellationQueueArn:
    Description: ARN of the Event Cancellation SQS Queue
    Value: !GetAtt EventCancellationQueue.Arn
  EventCancellationDLQArn:
    Description: ARN of the Event Cancellation Dead Letter Queue
    Value: !GetAtt EventCancellationDLQ.Arn
