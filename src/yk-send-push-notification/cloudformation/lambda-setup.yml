AWSTemplateFormatVersion: "2010-09-09"

Resources:
  # Lambda: Send Push Notification and Email for Event Cancellation
  SendPushNotificationLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: yk-send-push-notification
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 300 # 5 minutes to handle multiple bookings
      Environment:
        Variables:
          RETRY_COUNT: "1" # Default to 1 retry, configurable
          S3_FCM_KEY: "tiktie-firebase-adminsdk-fbsvc-345e7ed13f.json" # Firebase service account key
          SENDER_EMAIL: "support@tikties.com"
          EVENT_TABLE: "EventDetails"
      MemorySize: 256 # Sufficient for DynamoDB queries, FCM, and SES
      ReservedConcurrentExecutions: 5 # Limit concurrency to avoid DynamoDB throttling
      Code:
        ZipFile: |
          // Placeholder: Upload actual code via ZIP file
          export const handler = async () => {
            return { statusCode: 200, body: "Placeholder" };
          };
      Role: !GetAtt SendPushNotificationLambdaExecutionRole.Arn
      TracingConfig:
        Mode: Active

  # IAM Role for SendPushNotificationLambda
  SendPushNotificationLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: SendPushNotificationLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:PutItem
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/BookingDetails
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/BookingDetails/index/*
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/EventDetails
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/UsersTable
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/TiktoPushTokens
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/NotificationLogs
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/yk-send-push-notification:*
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::tiktie-notifications/*
                  - !Sub arn:aws:s3:::tiktie-notifications
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                Resource: !GetAtt EventCancellationQueue.Arn
              - Effect: Allow
                Action:
                  - sqs:SendMessage
                Resource: !GetAtt EventCancellationDLQ.Arn
              - Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: "*"
                Condition:
                  StringEquals:
                    ses:FromAddress: !Ref SenderEmail

  # SQS Queue: Event Cancellation Queue
  EventCancellationQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EventCancellationQueue
      VisibilityTimeout: 600 # 2x Lambda timeout (300s) to prevent duplicate processing
      RedrivePolicy:
        deadLetterTargetArn: !GetAtt EventCancellationDLQ.Arn
        maxReceiveCount: 3 # Move to DLQ after 3 failed attempts

  # SQS Dead Letter Queue
  EventCancellationDLQ:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: EventCancellationDLQ

  # Lambda Event Source Mapping for SQS
  EventCancellationQueueEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt EventCancellationQueue.Arn
      FunctionName: !Ref SendPushNotificationLambda
      BatchSize: 10 # Process up to 10 messages at a time
      Enabled: true

  # Lambda Permission for SQS
  SqsLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref SendPushNotificationLambda
      Action: lambda:InvokeFunction
      Principal: sqs.amazonaws.com
      SourceArn: !GetAtt EventCancellationQueue.Arn

Parameters:
  SenderEmail:
    Type: String
    Description: The verified SES sender email address
    Default: "support@tiktie.com"

Outputs:
  SendPushNotificationLambdaArn:
    Description: ARN of the Send Push Notification Lambda function
    Value: !GetAtt SendPushNotificationLambda.Arn
  EventCancellationQueueArn:
    Description: ARN of the Event Cancellation SQS Queue
    Value: !GetAtt EventCancellationQueue.Arn
  EventCancellationDLQArn:
    Description: ARN of the Event Cancellation Dead Letter Queue
    Value: !GetAtt EventCancellationDLQ.Arn
