AWSTemplateFormatVersion: "2010-09-09"

Parameters:
  Env:
    Type: String
    Default: Development
    AllowedValues: 
      - Development
      - Production

Mappings:
  EnvToResources:
    Development:
      ApiGatewayId: 27sqbwaad7
      UserPoolId: eu-west-1_hgUDdjyRr
      Env: dev
    Production:
      ApiGatewayId: prod-api-gateway-id
      UserPoolId: eu-west-1_hgUDdjyRr
      Env: prod

Conditions:
  IsProduction: !Equals [!Ref Env, Production]

Resources:
  # Lambda Function
  UpdateRoleLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: yk-update-role-api
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 30
      Code:
        ZipFile: |
          # Add your Lambda function code here
      Environment:
        Variables:
          USERS_TABLE: "UsersTable"
          ROLE_CONFIG: "user,organizer"
          USER_POOL_ID: !FindInMap [EnvToResources, !Ref Env, UserPoolId]
      Role: !GetAtt UpdateRoleApiExecutionRole.Arn

  # API Key
  ApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: "UpdateRoleApiKey"
      Enabled: true
      StageKeys:
        - RestApiId: !FindInMap [EnvToResources, !Ref Env, ApiGatewayId]
          StageName: !FindInMap [EnvToResources, !Ref Env, Env]

  # Usage Plan
  UsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: "UpdateRoleUsagePlan"
      ApiStages:
        - ApiId: !FindInMap [EnvToResources, !Ref Env, ApiId]
          Stage: !FindInMap [EnvToResources, !Ref Env, Env]
      Throttle:
        BurstLimit: 100
        RateLimit: 50
      Quota:
        Limit: 1000
        Period: MONTH
      ApiKeySource: HEADER

  # API Key Association
  ApiKeyUsagePlan:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      KeyId: !Ref ApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref UsagePlan

  # Lambda Execution Role
  UpdateRoleApiExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: updateRoleLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:UpdateItem
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/UsersTable
              - Effect: Allow
                Action:
                  - cognito-idp:AdminUpdateUserAttributes
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*

  # API Gateway Lambda Integration
  UpdateRoleApiGatewayPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt UpdateRoleLambda.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${!FindInMap [EnvToResources, !Ref Env, ApiGatewayId]}/*/*/update-role

  UpdateRoleApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !FindInMap [EnvToResources, !Ref Env, ApiGatewayId]
      ResourceId: !Ref UpdateRoleApiResourceId
      HttpMethod: POST
      AuthorizationType: API_KEY # Use "AWS_IAM" or "COGNITO_USER_POOLS" if needed
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${UpdateRoleLambda.Arn}/invocations

Outputs:
  UpdateRoleApiEndpoint:
    Description: Endpoint for the UpdateRole API
    Value: !Sub "https://${!FindInMap [EnvToResources, !Ref Env, ApiGatewayId]}.execute-api.${AWS::Region}.amazonaws.com/${ExistingApiStageName}/update-role"
