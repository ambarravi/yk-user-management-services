AWSTemplateFormatVersion: "2010-09-09"
Resources:
  GetProfileByIDLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: yk-get-profile-by-id
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          ORGANIZER_TABLE: "Organizer"
          S3_BUCKET_NAME: "tikto-orgnizer-dev"
      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log("Placeholder Lambda Function");
              return { statusCode: 200, body: "Placeholder" };
          };
      Role: !GetAtt GetProfileByIdLambdaExecutionRole.Arn

  GetProfileByIdLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GetProfileLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                Resource: !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/Organizer
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                Resource: !Sub arn:aws:s3:::tikto-orgnizer-dev/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"

  GetProfileResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: 27sqbwaad7 # Replace with your existing API Gateway ID
      ParentId: 78iwchywp5 # Replace with the parent resource ID (usually the root ID)
      PathPart: get-profile-by-id

  GetProfilePOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 27sqbwaad7
      ResourceId: !Ref GetProfileResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt GetProfileByIDLambda.Arn }
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'http://localhost:3000, https://dom5rgdes5ko4.cloudfront.net'"
            method.response.header.Access-Control-Allow-Methods: "'POST, OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization'"

  GetProfileOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: 27sqbwaad7
      ResourceId: !Ref GetProfileResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'http://localhost:3000, https://dom5rgdes5ko4.cloudfront.net'"
              method.response.header.Access-Control-Allow-Methods: "'POST, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
