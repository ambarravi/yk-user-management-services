AWSTemplateFormatVersion: "2010-09-09"
Parameters:
  ApiGatewayRestApiId:
    Type: String
    Description: The REST API ID for API Gateway deployment
  Env:
    Type: String
    Default: Development
    AllowedValues:
      - Development
      - Production
  StageName:
    Type: String
    Description: The stage name (e.g., dev, prod)

Mappings:
  EnvToResources:
    Development:
      ApiGatewayId: 27sqbwaad7
      UserPoolId: eu-west-1_hgUDdjyRr
      Stage: dev
      ApiGatewayRootResourceId: 78iwchywp5
    Production:
      ApiGatewayId: 27sqbwaad7
      UserPoolId: eu-west-1_hgUDdjyRr
      Stage: prod
      ApiGatewayRootResourceId: 78iwchywp5

Resources:
  GetProfilePicLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: yk-get-profile-pic
      Handler: index.handler
      Runtime: nodejs20.x
      Timeout: 30
      Environment:
        Variables:
          S3_BUCKET_NAME: !Sub "tikto-orgnizer-${StageName}"
          USER_POOL_ID: !FindInMap [EnvToResources, !Ref Env, UserPoolId]

      Code:
        ZipFile: |
          exports.handler = async (event) => {
              console.log("Submit Event Lambda Function");
              return { statusCode: 200, body: "Event Submitted Successfully" };
          };
      Role: !GetAtt GetProfilePicLambdaExecutionRole.Arn
      TracingConfig:
        Mode: Active

  GetProfilePicLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: GetProfilePicLambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - cognito-idp:AdminUpdateUserAttributes
                  - cognito-idp:AdminGetUser
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !Sub arn:aws:s3:::tikto-orgnizer-${StageName}
                  - !Sub arn:aws:s3:::tikto-orgnizer-${StageName}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/*
              - Effect: Allow
                Action:
                  - xray:PutTraceSegments
                  - xray:PutTelemetryRecords
                Resource: "*"

  GetProfilePicLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref GetProfilePicLambda
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${ApiGatewayRestApiId}/*

  GetProfilePicResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !FindInMap [EnvToResources, !Ref Env, ApiGatewayId]
      ParentId: !FindInMap [EnvToResources, !Ref Env, ApiGatewayRootResourceId]
      PathPart: get-profile-pic

  GetProfilePicPOSTMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !FindInMap [EnvToResources, !Ref Env, ApiGatewayId]
      ResourceId: !Ref GetProfilePicResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations
          - { LambdaArn: !GetAtt GetProfilePicLambda.Arn }
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: "'*'"
            method.response.header.Access-Control-Allow-Methods: "'POST, OPTIONS'"
            method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization'"

  GetProfilePicOPTIONSMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !FindInMap [EnvToResources, !Ref Env, ApiGatewayId]
      ResourceId: !Ref GetProfilePicResource
      HttpMethod: OPTIONS
      AuthorizationType: NONE
      Integration:
        Type: MOCK
        RequestTemplates:
          application/json: '{ "statusCode": 200 }'
        IntegrationResponses:
          - StatusCode: 200
            ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
              method.response.header.Access-Control-Allow-Methods: "'POST, OPTIONS'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type, Authorization'"
      MethodResponses:
        - StatusCode: 200
          ResponseParameters:
            method.response.header.Access-Control-Allow-Origin: true
            method.response.header.Access-Control-Allow-Methods: true
            method.response.header.Access-Control-Allow-Headers: true
